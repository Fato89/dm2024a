primero_ganador  <- primero_ganador + 1
}
cat("sale en el top", "\t", primero_ganador / 10000, "\n")
# cat( tiros_inicial*100+topn*tiros_libres, "\t", primero_ganador/10000, "\n" )
}
t1  <- Sys.time()
print( t1 - t0 )
cat("sale en el top", "\t", primero_ganador / 10000, "\n")
primero_ganador
jugadores
#intencionalmente el mejor jugador va al final de la lista de jugadores
#porque la funcion which.max() de R hace trampa
#si hay un empate ( dos máximos) se queda con el que esta primero en el vector
set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
dist_max <- 10
t0  <- Sys.time()
primero_ganador  <- 0
for(i in 1:10000) {
#diez mil experimentos
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
while (njug > 1) {
vaciertos  <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
dista <- max(vaciertos) - min(vaciertos)
if (dista > dist_max) {
jugadores <- jugadores[max(vaciertos)-vaciertos <= dist_max]
vaciertos <- vaciertos[max(vaciertos)-vaciertos <= dist_max]
}
njug <- length(jugadores)
}
if (mejor %in% jugadores){
primero_ganador  <- primero_ganador + 1
}
}
cat("sale en el top", "\t", primero_ganador / 10000, "\n")
total_tiros
dist_max <- 15
t0  <- Sys.time()
primero_ganador  <- 0
for(i in 1:10000) {
#diez mil experimentos
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
while (njug > 1) {
vaciertos  <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
dista <- max(vaciertos) - min(vaciertos)
if (dista > dist_max) {
jugadores <- jugadores[max(vaciertos)-vaciertos <= dist_max]
vaciertos <- vaciertos[max(vaciertos)-vaciertos <= dist_max]
}
njug <- length(jugadores)
}
if (mejor %in% jugadores){
primero_ganador  <- primero_ganador + 1
}
}
cat("sale en el top", "\t", primero_ganador / 10000, "\n")
t1  <- Sys.time()
print( t1 - t0 )
total_tiros
total_tiros <- matrix(nrow = 10000)
total_tiros
total_tiros <- matrix(nrow = 10000,ncol = 2)
total_tiros
total_tiros %>% class
class(total_tiros)
resultado <- matrix(nrow = 10000,ncol = 2)
resultado
resultado[1,1] <- 100
resultado[1,2] <- FALSE
resultado
head(resultado )
mejor
mejor %in% jugadores
#intencionalmente el mejor jugador va al final de la lista de jugadores
#porque la funcion which.max() de R hace trampa
#si hay un empate ( dos máximos) se queda con el que esta primero en el vector
set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
#defino distancia de salida
dist_max <- 15
resultado <- matrix(nrow = 10000,ncol = 2)
t0  <- Sys.time()
primero_ganador  <- 0
for(i in 1:10000) {
#diez mil experimentos
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
while (njug > 1) {
vaciertos  <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
dista <- max(vaciertos) - min(vaciertos)
if (dista > dist_max) {
jugadores <- jugadores[max(vaciertos)-vaciertos <= dist_max]
vaciertos <- vaciertos[max(vaciertos)-vaciertos <= dist_max]
}
njug <- length(jugadores)
}
resultado[i,1] <- mejor %in% jugadores
resultado[i,2] <- total_tiros
}
mean(resultado[,2])
resultado
mean(resultado[,1])
mean(resultado[,2])
cat(mean(resultado[,1]),"% con" mean(resultado[,2]) ,"tiradas promedio" )
cat(mean(resultado[,1]),"% con", mean(resultado[,2]) ,"tiradas promedio" )
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP.r")
read.delim2("https://ff316374140254b6ffa711f29017cb885c8fc0fc6d21446666ee732-apidata.googleusercontent.com/download/storage/v1/b/bkt8923/o/exp%2FHT4510%2FHT4510.txt?jk=ASOpP9hesgcyWdjDy_mofSWUnZo-7vv7JrbiqRN6tg5b-WX5E7_br0pdVYAQqwts2yWTbUnBLWU17SWjdi3Q5_ouYX9Hi7rr4bTAHLtUIKmtCMSQlkCaOX5RLXKmm872jnjh7EVv7alEWwrcMrF3vWxv7xirlpxju-doLFOzFkka-Z_U1CNbWmHIU0XEtstuHyGgO8PAufP_fmieulWWVOn_3iZoXs6kwZ867sUHqT24ngZaJ5CjvABOgrBtj_a1FivSBTe6ukP3FTGZx7r_6C9L9cV7K2Spb04xqXqSaYPdGarTCRdQXecM4wwI9lvLoSByvqKa1YIw-olle6BtSUh413U7xiTNT7m9yO0Ag3JBJnzpdFnATKGK3CtSgQKFw4E41CLvBBkKs1I4rM5qJLIXxW6DUluxuoM9y9d03dfntqLFg9RXc7QLSnBpfrpMs2mXB5K4sXOS4jIRe_daRWfdIHRUjyZTnvVWL7uEF5Vh6mERBcoP9vj6KAadHuRvR1HDijCzMctTRw_zMRmY8WGn2Dg9-wmCefLtoU2pe2Mr86nGNnCfdGZpYcfrKmVl7eSAGCAW7ws2E6L-6ID4ERRDySz-1SlZY3vZuXPqmH55BkuyofPk7KF5QuxEtS8bmW2TKsZFsqYMrqzB4vfGmKf5ZUJt0xADMzyc_fxz_2lYawCx5kVX6uShKvXYaB0M0Uz38afDX17Wkm9aCsGTGYfJwWzYpUASTlP0fctvYcEmkEgZLpRRUpudm_qeUs7wDvK2xovc8Ivuh9QTSY7VM4AKJdpHGIrYAO8WcKiFbZW2t4YZT_QTSE_Is6x3HE-Mm7vaxsK5fLAW8poqO4W7lp12EDMiUTjkTbb-pO7o0F8RMeUXqx5zP3nSMX-4jEd8ryvVjyIXv04m8_Nk1_w_b9Tpm-XHXBkTUVzG28ouLsLqHmm9CzwCTDqYw8hQ6I9oecvFXUkHd3gULryih4H2vu8l6yePbCmUeTe2tS8jbaYvOn8p84CLdDdjNZAJshZHbqA8b_pT1Z_M-uCHX8DTvseyk8C_xDwNNS3KRfzPxyiaJo7ju9JN4ZONbAT9vBh-2luUAq74nyADwspT6zK3IIHuQTgykajr2ZbAd3boEQUD0femk0zQ01YPVeW0RxbqSFkRK5JlR8KexksvSVmOAPvGfOVlKVIAm7zrWD7OLCCITCeBtB7nCXOIb80rgPmLwg&isca=1")
saveRDS(
read.delim2("https://ff316374140254b6ffa711f29017cb885c8fc0fc6d21446666ee732-apidata.googleusercontent.com/download/storage/v1/b/bkt8923/o/exp%2FHT4510%2FHT4510.txt?jk=ASOpP9hesgcyWdjDy_mofSWUnZo-7vv7JrbiqRN6tg5b-WX5E7_br0pdVYAQqwts2yWTbUnBLWU17SWjdi3Q5_ouYX9Hi7rr4bTAHLtUIKmtCMSQlkCaOX5RLXKmm872jnjh7EVv7alEWwrcMrF3vWxv7xirlpxju-doLFOzFkka-Z_U1CNbWmHIU0XEtstuHyGgO8PAufP_fmieulWWVOn_3iZoXs6kwZ867sUHqT24ngZaJ5CjvABOgrBtj_a1FivSBTe6ukP3FTGZx7r_6C9L9cV7K2Spb04xqXqSaYPdGarTCRdQXecM4wwI9lvLoSByvqKa1YIw-olle6BtSUh413U7xiTNT7m9yO0Ag3JBJnzpdFnATKGK3CtSgQKFw4E41CLvBBkKs1I4rM5qJLIXxW6DUluxuoM9y9d03dfntqLFg9RXc7QLSnBpfrpMs2mXB5K4sXOS4jIRe_daRWfdIHRUjyZTnvVWL7uEF5Vh6mERBcoP9vj6KAadHuRvR1HDijCzMctTRw_zMRmY8WGn2Dg9-wmCefLtoU2pe2Mr86nGNnCfdGZpYcfrKmVl7eSAGCAW7ws2E6L-6ID4ERRDySz-1SlZY3vZuXPqmH55BkuyofPk7KF5QuxEtS8bmW2TKsZFsqYMrqzB4vfGmKf5ZUJt0xADMzyc_fxz_2lYawCx5kVX6uShKvXYaB0M0Uz38afDX17Wkm9aCsGTGYfJwWzYpUASTlP0fctvYcEmkEgZLpRRUpudm_qeUs7wDvK2xovc8Ivuh9QTSY7VM4AKJdpHGIrYAO8WcKiFbZW2t4YZT_QTSE_Is6x3HE-Mm7vaxsK5fLAW8poqO4W7lp12EDMiUTjkTbb-pO7o0F8RMeUXqx5zP3nSMX-4jEd8ryvVjyIXv04m8_Nk1_w_b9Tpm-XHXBkTUVzG28ouLsLqHmm9CzwCTDqYw8hQ6I9oecvFXUkHd3gULryih4H2vu8l6yePbCmUeTe2tS8jbaYvOn8p84CLdDdjNZAJshZHbqA8b_pT1Z_M-uCHX8DTvseyk8C_xDwNNS3KRfzPxyiaJo7ju9JN4ZONbAT9vBh-2luUAq74nyADwspT6zK3IIHuQTgykajr2ZbAd3boEQUD0femk0zQ01YPVeW0RxbqSFkRK5JlR8KexksvSVmOAPvGfOVlKVIAm7zrWD7OLCCITCeBtB7nCXOIb80rgPmLwg&isca=1") ,
"C:\\proyectos\\mineriadatos\\TareasHogar\\HT4510.rds"
)
library(tidyverse)
tabla <- readRDS("C:\\proyectos\\mineriadatos\\TareasHogar\\HT4510.rds")
tabla %>%
View()
tabla %>%
View()
tabla %>%
arrange(ganancia)
tabla %>%
arrange(ganancia) %>% View()
tabla %>%
arrange(-ganancia) %>% head
tabla %>%
arrange(-ganancia) %>% head
tabla %>%
arrange(-ganancia) %>%
filter(n()==1)
tabla %>%
arrange(-ganancia) %>%
slice(1)
tabla %>% View()
mutate(hora=parse_date_time(fecha)
tabla %>%
tabla %>% mutate(hora=parse_date_time(fecha)
tabla %>% mutate(hora=parse_date_time(fecha))
tabla %>%
mutate(hora=parse_date_time(fecha,"ymd Hms"))
tabla %>%
mutate(hora=parse_date_time(fecha,"ymd HMS"))
tabla %>%
mutate(hora=parse_date_time(fecha,"ymd HMS")) %>%
pull(hora) %>% summary()
asd <-
tabla %>%
mutate(hora=parse_date_time(fecha,"ymd HMS")) %>%
pull(hora) %>% summary()
asd["Min."]
asd["Max."]
asd["Max."]-asd["Min."]
(asd["Max."]-asd["Min."])/3600
tabla %>%
mutate(hora=parse_date_time(fecha,"ymd HMS")) %>%
pull(hora) %>% summary()
tabla %>%
arrange(-ganancia) %>%
slice(1)
tabla %>%
arrange(-ganancia) %>%
slice(1) %>% View()
tabla %>%
arrange(-ganancia) %>% View()
tabla %>%
arrange(-ganancia) %>%
slice(1) %>% View()
qbinom(.5, 10000, .7, lower.tail = TRUE)
qbinom(.05, 10000, .7, lower.tail = TRUE)
qbinom(.005, 10000, .7, lower.tail = TRUE)
qbinom(.001, 10000, .7, lower.tail = TRUE)
qbinom(.01, 10000, .7, lower.tail = TRUE)
qbinom(.01, 1, .7, lower.tail = TRUE)
qbinom(.01, 2, .7, lower.tail = TRUE)
qbinom(.01, 8, .7, lower.tail = TRUE)
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
i <- 0
# set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
resultado <- matrix(nrow = 10000,ncol = 2)
lanza_prueba <- 15
t0  <- Sys.time()
primero_ganador  <- 0
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
i <- 0
njug
i <- i+1
i
vaciertos   <- vaciertos + ftirar(jugadores, 1)
vaciertos
total_tiros <- total_tiros+length(jugadores)
total_tiros
# if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
min01p
max(vaciertos)/i
i
qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
primero_ganador
i
# set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
resultado <- matrix(nrow = 10000,ncol = 2)
lanza_prueba <- 15
t0  <- Sys.time()
primero_ganador  <- 0
total_tiros <- 0
total_tiros
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
i <- 0
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
total_tiros
i>lanza_prueba
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
njug
i <- i+1
i
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
vaciertos
total_tiros
i>lanza_prueba
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
min01p
vaciertos >= min01p
vaciertos
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
vaciertos
jugadores
resultado
# set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
resultado <- matrix(nrow = 10000,ncol = 2)
lanza_prueba <- 15
t0  <- Sys.time()
primero_ganador  <- 0
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
i <- 0
while (njug > 1) {
i <- i+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, i, max(vaciertos)/i, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
njug <- length(jugadores)
cat(njug,"\n")
}
resultado[i,1] <- mejor %in% jugadores
resultado[i,2] <- total_tiros
resultado
resultado %>% head
head(resultado)
total_tiros
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
# set.seed( 980071 )
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty ){
vsize <- length(prob)
return( rowSums( matrix( runif( qty*vsize ), vsize, qty)  <
matrix( rep(prob,qty), vsize, qty)  ) )
}
#defino los jugadores
mejor      <- 0.7
peloton    <- ( 501:599 ) / 1000
resultado <- matrix(nrow = 10000,ncol = 2)
lanza_prueba <- 15
primero_ganador  <- 0
total_tiros <- 0
jugadores  <- c( peloton, mejor ) #intencionalmente el mejor esta al final
vaciertos <- rep(0, length(jugadores))
njug <- length(jugadores)
t <- 0
njug
t <- t+1
vaciertos   <- vaciertos + ftirar(jugadores, 1)
total_tiros <- total_tiros+length(jugadores)
if(i>lanza_prueba){
min01p <- qbinom(.01, t, max(vaciertos)/t, lower.tail = TRUE)
jugadores <- jugadores[vaciertos >= min01p]
vaciertos <- vaciertos[vaciertos >= min01p]
}
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
?txtProgressBar
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
resultado
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
resultado
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
resultado[2]
resultado[,2]
hist(resultado[,2])
qbinom(.01, 100, .7, lower.tail = TRUE)
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
source("C:/proyectos/mineriadatos/dm2024a/src/CazaTalentos/basket_desafio_FJP_vp2.r")
